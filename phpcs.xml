<?xml version="1.0"?>
<ruleset name="Laravel Standards">
    <!--
       The name attribute of the ruleset tag is displayed
       when running PHP_CodeSniffer with the -v command line
       argument. The description tag below is not displayed anywhere
       except in this file, so it can contain information for
       developers who may change this file in the future.
    -->
    <description>The Laravel Coding Standards</description>

    <!--
       If no files or directories are specified on the command line
       your custom standard can specify what files should be checked
       instead.
       Note that specifying any file or directory path
       on the command line will ignore all file tags.
    -->
    <file>app</file>
    <file>config</file>
    <file>public</file>
    <file>resources</file>
    <file>routes</file>
    <file>tests</file>

    <!--
       You can hard-code ignore patterns directly into your
       custom standard so you don't have to specify the
       patterns on the command line.
    -->
    <exclude-pattern>*/database/*</exclude-pattern>
    <exclude-pattern>*/cache/*</exclude-pattern>
    <exclude-pattern>*/*.js</exclude-pattern>
    <exclude-pattern>*/*.css</exclude-pattern>
    <exclude-pattern>*/*.xml</exclude-pattern>
    <exclude-pattern>*/*.blade.php</exclude-pattern>
    <exclude-pattern>*/autoload.php</exclude-pattern>
    <exclude-pattern>*/storage/*</exclude-pattern>
    <exclude-pattern>*/docs/*</exclude-pattern>
    <exclude-pattern>*/vendor/*</exclude-pattern>
    <exclude-pattern>*/migrations/*</exclude-pattern>

    <!--
       You can hard-code command line values into your custom standard.
       Note that this does not work for the command line values:
       -v[v][v], -l, -d, -sniffs and -standard
    -->
    <arg name="colors"/>
    <arg value="p"/>
    <arg value="s"/>

    <!--
       You can hard-code custom php.ini settings into your custom standard.
       The following tag sets the memory limit to 64M.
    -->
    <ini name="memory_limit" value="128M"/>

    <!--
       Include all sniffs in the PSR2 standard. Note that the
       path to the standard does not have to be specified as the
       PSR2 standard exists inside the PHP_CodeSniffer install
       directory.
    -->
    <rule ref="PSR2"/>
    <config name="installed_paths" value="vendor/slevomat/coding-standard"/>
    <config name="php_version" value="70100"/>

    <rule name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine" />

    <!-- Disable missing namespace rule for tests -->
    <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <!-- Disable camel caps rule for tests -->
    <rule ref="PSR1.Methods.CamelCapsMethodName.NotCamelCaps">
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <!-- Disable method visibility rule for tests -->
    <rule ref="Squiz.Scope.MethodScope">
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <!-- Make the soft line length warning silent -->
    <rule ref="Generic.Files.LineLength.TooLong">
        <severity>0</severity>
    </rule>

    <!-- Enable some extra rules -->
    <!-- Force [] short array syntax -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax.Found"/>
    <!-- Warn when double quotes are used over single quotes -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <!-- Except when the double quotes contain a variable -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>
    <!-- Class name should match the file name -->
    <rule ref="Squiz.Classes.ClassFileName"/>

    <!-- Arrays -->
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNoNewline" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeySpecified" />
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoKeySpecified" />
    </rule>
    <rule ref="SlevomatCodingStandard.Arrays.MultiLineArrayEndBracketPlacement"/>
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace"/>

    <!-- Type Hints -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <!-- just because we love useless annotations -->
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.UselessAnnotation" />
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification" />
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint" />
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <!-- just because we love useless annotations -->
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.UselessAnnotation" />
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification" />
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint" />
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <!-- just because we love useless annotations -->
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.UselessAnnotation" />
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification" />
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint" />
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue">
        <type>warning</type>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHintSpacing"/>

    <!-- Strings -->
    <!-- Warn when double quotes are used over single quotes -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <!-- Except when the double quotes contain a variable -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <severity>0</severity>
    </rule>

    <!-- Functions -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="SlevomatCodingStandard.Functions.DisallowEmptyFunction"/>
    <rule ref="SlevomatCodingStandard.Functions.TrailingCommaInCall"/>

    <!-- Namespaces -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing">
        <properties>
            <property name="linesCountBeforeNamespace" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="1"/>
            <property name="linesCountAfterLastUse" value="1"/>
        </properties>
    </rule>

    <!-- Classes -->
    <!-- Class name should match the file name -->
    <rule ref="Squiz.Classes.ClassFileName">
        <exclude-pattern>*/migrations/*</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.ClassMemberSpacing">
        <properties>
            <property name="linesCountBetweenMembers" value="1" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing">
        <properties>
            <property name="minLinesCount" value="1" />
            <property name="maxLinesCount" value="1" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="1" />
            <property name="maxLinesCountBeforeWithComment" value="1" />
            <property name="minLinesCountBeforeWithoutComment" value="0" />
            <property name="maxLinesCountBeforeWithoutComment" value="0" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0"/>
        </properties>
        <exclude name="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces.NoEmptyLineBeforeClosingBrace"/>
    </rule>

    <!-- DocBlocks -->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBeforeFirstContent" value="0" type="integer" />
            <property name="linesCountAfterLastContent" value="0"/>
            <property name="linesCountBetweenDescriptionAndAnnotations" value="1" type="integer" />
            <property name="linesCountBetweenAnnotationsGroups" value="1" type="integer" />
            <property name="annotationsGroups" type="array">
                <element value="@dataProvider,@var,@param,@return"/>
                <element value="@expectedException,@expectedExceptionMessage"/>
                <element value="@throws,@see,@todo"/>
            </property>
        </properties>
    </rule>
    <!--    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>-->
    <!--    <rule ref="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment"/>-->

    <!-- Controlled structures -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator">
        <properties>
            <property name="lineLengthLimit" value="100" />
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
        <properties>
            <property name="tokensToCheck" type="array">
                <element value="T_RETURN"/>
            </property>
        </properties>
    </rule>


    <!-- PHP -->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>

    <!-- Variables -->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable"/>
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>

    <!-- Exceptions -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>

    <!-- Some extra formating rules-->
    <!-- Expect one space after NOT (!) operator -->
    <rule ref="Generic.Formatting.SpaceAfterNot"/>
    <!-- Expect one space after cast, e.g. (int) $foo -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>
    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces">
        <properties>
            <property name="ignoreSpacesInAnnotation" value="1"/>
        </properties>
    </rule>

</ruleset>
