<?php

namespace PodPoint\MailExport\Tests\Feature;

use Carbon\Carbon;
use Illuminate\Mail\Events\MessageSent;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Storage;
use PodPoint\MailExport\Events\MessageStored;
use PodPoint\MailExport\Tests\Stubs\ExportableByMethodsMailable;
use PodPoint\MailExport\Tests\Stubs\ExportableByPropertiesMailable;
use PodPoint\MailExport\Tests\Stubs\ExportableMailable;
use PodPoint\MailExport\Tests\Stubs\StandardMailable;
use PodPoint\MailExport\Tests\TestCase;

class MailExportTest extends TestCase
{
    /** @test */
    public function it_can_be_disabled_completely()
    {
        config()->set('mail-export', [
            'enabled' => false,
            'disk' => 'local',
            'path' => 'mail-exports',
        ]);

        Event::fake([MessageSent::class]);
        Storage::fake('local');

        Mail::send(new ExportableMailable);

        Event::assertDispatched(MessageSent::class);
        $this->assertEmpty(Storage::disk('local')->files('mail-exports'));
    }

    /** @test */
    public function it_will_export_exportable_mailables()
    {
        config()->set('mail-export', [
            'enabled' => true,
            'disk' => 'local',
            'path' => 'mail-exports',
        ]);

        Storage::fake('local');

        Mail::send(new ExportableMailable);

        $this->assertCount(1, Storage::disk('local')->files('mail-exports'));
    }

    /** @test */
    public function it_will_not_export_standard_mailables()
    {
        config()->set('mail-export', [
            'enabled' => true,
            'disk' => 'local',
            'path' => 'mail-exports',
        ]);

        Storage::fake('local');

        Mail::send(new StandardMailable);

        $this->assertEmpty(Storage::disk('local')->files('mail-exports'));
    }

    /** @test */
    public function it_will_export_mails_as_eml_files()
    {
        Storage::fake('some_disk');

        Mail::send(new ExportableByPropertiesMailable);

        Storage::disk('some_disk')->assertExists('some_path/some_filename.eml');
    }

    /** @test */
    public function it_can_export_using_the_default_application_disk_if_none_is_given()
    {
        config()->set('filesystem.default', 'local');
        config()->set('mail-export', [
            'enabled' => true,
            'disk' => null,
            'path' => 'mail-exports',
        ]);

        Storage::fake('local');
        Storage::fake('some_disk');

        Mail::send(new ExportableMailable);

        $this->assertCount(1, Storage::disk('local')->files('mail-exports'));
        $this->assertEmpty(Storage::disk('some_disk')->files('mail-exports'));
    }

    /** @test */
    public function it_can_export_using_storage_details_configured_by_mailable_property()
    {
        config()->set('mail-export', [
            'enabled' => true,
            'disk' => 'local',
            'path' => 'mail-exports',
        ]);

        Storage::fake('local');
        Storage::fake('some_disk');

        Mail::send(new ExportableByPropertiesMailable);

        Storage::disk('some_disk')->assertExists('some_path/some_filename.eml');
        $this->assertEmpty(Storage::disk('local')->files('mail-exports'));
    }

    /** @test */
    public function it_can_export_using_storage_details_configured_by_mailable_method()
    {
        config()->set('mail-export', [
            'enabled' => true,
            'disk' => 'local',
            'path' => 'mail-exports',
        ]);

        Storage::fake('local');
        Storage::fake('some_disk');

        Mail::send(new ExportableByMethodsMailable);

        Storage::disk('some_disk')->assertExists('some_path/some_filename.eml');
        $this->assertEmpty(Storage::disk('local')->files('mail-exports'));
    }

    /** @test */
    public function it_can_export_using_an_autogenerated_filename_if_none_is_given()
    {
        config()->set('mail-export', [
            'enabled' => true,
            'disk' => 'local',
            'path' => 'mail-exports',
        ]);

        Storage::fake('local');
        Carbon::setTestNow(Carbon::create(2021, 3, 26, 15, 01, 42));

        Mail::send(new ExportableMailable);

        Storage::disk('local')
            ->assertExists('mail-exports/2021_03_26_150142_jane_at_example_com_this_is_the_subject.eml');
    }

    /** @test */
    public function it_will_dispatch_an_event_when_mail_is_exported_and_stored()
    {
        Event::fake([MessageStored::class]);

        Mail::send(new ExportableMailable);

        Event::assertDispatched(MessageStored::class);
    }
}
